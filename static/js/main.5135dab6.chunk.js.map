{"version":3,"sources":["components/Input/styles.js","components/Input/Input.jsx","components/Button/styles.js","components/Button/Button.jsx","apiRequests/constants.js","apiRequests/usersRequests.js","components/Post/styles.js","components/Post/Post.jsx","components/PostsList/styles.js","components/PostsList/PostsList.jsx","apiRequests/postsRequests.js","App.jsx","serviceWorker.js","index.jsx"],"names":["StyledInput","styled","input","InputDescription","p","Input","inputValue","inputChangeHandler","descriptionText","type","value","onChange","StyledButton","button","Button","name","handler","onClick","ROOT_URL","USERS_URL","POSTS_URL","getUser","userId","a","axios","get","response","data","PostTitle","h2","PostAuthor","div","Post","title","useState","author","setAuthor","useEffect","then","user","username","StyledPostsList","ul","StyledListItem","li","PostsList","posts","filter","post","includes","map","filteredPost","key","id","getPosts","AppWrapper","FilterField","setInputValue","setPosts","error","setError","array","catch","err","message","evt","preventDefault","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5135dab6.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const StyledInput = styled.input`\r\n  display: block;\r\n  border: 1px solid #cccc;\r\n  min-width: 30%;\r\n  border-radius: 5px;\r\n  min-height: 18px;\r\n  margin: 15px 10px 15px 0;\r\n  outline: none;\r\n  &:focus {\r\n    border: 1px solid #29b0d9;\r\n  }\r\n`;\r\n\r\nexport const InputDescription = styled.p`\r\n  margin-right: 10px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { InputDescription, StyledInput } from './styles';\r\n\r\nconst Input = ({ inputValue, inputChangeHandler, descriptionText }) => {\r\n  return (\r\n    <>\r\n      {descriptionText ? <InputDescription>{descriptionText}</InputDescription> : null}\r\n      <StyledInput type=\"text\" value={inputValue} onChange={inputChangeHandler} />\r\n    </>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  inputValue: PropTypes.string.isRequired,\r\n  inputChangeHandler: PropTypes.func.isRequired,\r\n  descriptionText: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Input;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledButton = styled.button`\r\n  height: 25px;\r\n  line-height: 1em;\r\n  cursor: pointer;\r\n  vertical-align: middle;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  user-select: none;\r\n  color: rgb(0, 0, 0);\r\n  outline: none;\r\n  border: 1px solid rgba(0, 0, 0, 0.4);\r\n  border-top-color: rgba(0, 0, 0, 0.3);\r\n  border-radius: 2px;\r\n  background: linear-gradient(rgb(255, 255, 255), rgb(240, 240, 240));\r\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0) inset, 0 1px 1px 1px rgba(255, 255, 255, 0.2), 0 -1px 1px 1px rgba(0, 0, 0, 0);\r\n  transition: 0.2s ease-in-out;\r\n  &:hover:not(:active) {\r\n    box-shadow: 0 0 3px rgba(0, 0, 0, 0) inset, 0 1px 1px 1px rgba(0, 255, 255, 0.5),\r\n      0 -1px 1px 1px rgba(0, 255, 255, 0.5);\r\n  }\r\n  &:active {\r\n    background: linear-gradient(rgb(250, 250, 250), rgb(235, 235, 235));\r\n    box-shadow: 0 0 3px rgba(0, 0, 0, 0.5) inset, 0 1px 1px 1px rgba(255, 255, 255, 0.4),\r\n      0 -1px 1px 1px rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\n\r\nexport default StyledButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport StyledButton from './styles';\r\n\r\nconst Button = ({ type, name, handler }) => {\r\n  return (\r\n    <StyledButton type={type} onClick={handler}>\r\n      {name}\r\n    </StyledButton>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  type: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  handler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","const ROOT_URL = 'https://jsonplaceholder.typicode.com';\r\n\r\nexport const USERS_URL = `${ROOT_URL}/users`;\r\n\r\nexport const POSTS_URL = `${ROOT_URL}/posts`;\r\n","import axios from 'axios';\r\nimport { USERS_URL } from './constants';\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const getUser = async (userId) => {\r\n  try {\r\n    const response = await axios.get(`${USERS_URL}/${userId}`);\r\n    return response.data;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const PostTitle = styled.h2`\r\n  align-self: flex-start;\r\n  width: 100%;\r\n`;\r\n\r\nexport const PostAuthor = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  width: 100%;\r\n  align-self: flex-end;\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getUser } from '../../apiRequests/usersRequests';\r\nimport { PostTitle, PostAuthor } from './styles';\r\n\r\nconst Post = ({ title, userId }) => {\r\n  const [author, setAuthor] = useState('');\r\n\r\n  useEffect(() => {\r\n    getUser(userId).then((user) => setAuthor(() => user.username));\r\n  }, [userId]);\r\n\r\n  return (\r\n    <>\r\n      <PostTitle>{title}</PostTitle>\r\n      <PostAuthor>Author: {author}</PostAuthor>\r\n    </>\r\n  );\r\n};\r\n\r\nPost.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  userId: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Post;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledPostsList = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport const StyledListItem = styled.li`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  padding: 10px 15px;\r\n  flex-wrap: wrap;\r\n  border: 1px solid #cccc;\r\n  margin-bottom: 20px;\r\n  width: 100%;\r\n  min-height: 150px;\r\n  background-color: #bb40ff;\r\n  cursor: pointer;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Post from '../Post/Post';\r\n\r\nimport { StyledListItem, StyledPostsList } from './styles';\r\n\r\nconst PostsList = ({ posts, inputValue }) => {\r\n  return (\r\n    <StyledPostsList>\r\n      {inputValue\r\n        ? posts\r\n            .filter((post) => post.title.includes(inputValue))\r\n            .map((filteredPost) => (\r\n              <StyledListItem key={filteredPost.id}>\r\n                <Post title={filteredPost.title} userId={filteredPost.userId} />\r\n              </StyledListItem>\r\n            ))\r\n        : posts.map((post) => (\r\n            <StyledListItem key={post.id}>\r\n              <Post title={post.title} userId={post.userId} />\r\n            </StyledListItem>\r\n          ))}\r\n    </StyledPostsList>\r\n  );\r\n};\r\n\r\nPostsList.propTypes = {\r\n  posts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      userId: PropTypes.number.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n      body: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ).isRequired,\r\n  inputValue: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostsList;\r\n","import axios from 'axios';\r\nimport { POSTS_URL } from './constants';\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const getPosts = async () => {\r\n  try {\r\n    const response = await axios.get(POSTS_URL);\r\n    return response.data;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Input from './components/Input/Input';\r\nimport Button from './components/Button/Button';\r\nimport PostsList from './components/PostsList/PostsList';\r\nimport { getPosts } from './apiRequests/postsRequests';\r\n\r\nconst AppWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  width: 80%;\r\n  padding: 10px;\r\n  margin: auto;\r\n`;\r\n\r\nconst FilterField = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nexport default () => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [posts, setPosts] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    getPosts()\r\n      .then((array) => setPosts(() => array))\r\n      .catch((err) => setError(() => err.message));\r\n  }, []);\r\n\r\n  const inputChangeHandler = (evt) => {\r\n    evt.preventDefault();\r\n    const { value } = evt.target;\r\n    setInputValue(() => value);\r\n  };\r\n\r\n  const resetButtonHandler = (evt) => {\r\n    evt.preventDefault();\r\n    setInputValue(() => '');\r\n  };\r\n\r\n  if (error) {\r\n    return <h1>{error}</h1>;\r\n  }\r\n\r\n  return (\r\n    <AppWrapper>\r\n      <h1>Тестовое задание</h1>\r\n      <FilterField>\r\n        <Input inputValue={inputValue} inputChangeHandler={inputChangeHandler} descriptionText=\"Поиск по заголовку:\" />\r\n        <Button type=\"reset\" name=\"Очистить\" handler={resetButtonHandler} />\r\n      </FilterField>\r\n      <PostsList posts={posts} inputValue={inputValue} />\r\n    </AppWrapper>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}